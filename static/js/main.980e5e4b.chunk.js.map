{"version":3,"sources":["components/todoform.js","components/todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","onChange","placeholder","onClick","React","Component","class","style","textDecoration","todo","onEdit","deleteTodo","TodoList","todos","addTodo","map","handleDeleteTodo","filter","key","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAGqBA,E,2MACpBC,MAAO,CACNC,KAAK,I,EAGNC,aAAe,SAAAC,GACd,EAAKC,SAAL,eACED,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAIpCC,aAAe,SAACL,GACfA,EAAMM,iBACN,EAAKC,MAAMC,SAAS,CACnBC,GAAIC,IAAQC,WACZb,KAAM,EAAKD,MAAMC,KACjBc,UAAU,IAGX,EAAKX,SAAS,CACbH,KAAK,M,wEAMN,OACC,6BACA,sDACA,0BAAMU,SAAUK,KAAKR,cACrB,2BACCF,KAAM,OACNC,MAAOS,KAAKhB,MAAMC,KAClBgB,SAAWD,KAAKd,aAChBgB,YAAa,mBAEd,4BAAQC,QAASH,KAAKR,cAAtB,oB,GApCmCY,IAAMC,WCA7B,G,KAAA,SAACX,GAAD,OACd,yBAAKY,MAAM,OACV,+BACC,wBAAIA,MAAM,SACT,wBAAIA,MAAM,SACT,yBACCC,MAAO,CAACC,eAAgBd,EAAMe,KAAKV,SAAW,eAAiB,IAC/DI,QAAST,EAAMgB,QAAShB,EAAMe,KAAKxB,OAGrC,4BACC,4BAAQkB,QAAUT,EAAMiB,YAAxB,gB,gOCTgBC,E,2MACnB5B,MAAO,CACL6B,MAAO,I,EAGTC,QAAU,SAACL,GACT,EAAKrB,SAAS,CACZyB,MAAM,CAACJ,GAAF,mBAAW,EAAKzB,MAAM6B,W,EAI/BH,OAAQ,SAACd,GACP,EAAKR,SAAS,CACZyB,MAAO,EAAK7B,MAAM6B,MAAME,IAAI,SAAAN,GAE1B,OAAIA,EAAKb,KAAMA,E,qVACN,CAAP,GACMa,EADN,CAEEV,UAAYU,EAAKV,WAKZU,O,EAMfO,iBAAkB,SAACpB,GACjB,EAAKR,SAAS,CAACyB,MAAQ,EAAK7B,MAAM6B,MAAMI,OAAO,SAAAR,GAAI,OAAIA,EAAKb,KAAOA,O,wEAG5D,IAAD,OACN,OACE,yBAAKU,MAAM,OACT,kBAAC,EAAD,CAAUX,SAAWK,KAAKc,UACxBd,KAAKhB,MAAM6B,MAAME,IAAI,SAAAN,GAAI,OACzB,kBAAC,EAAD,CACES,IAAMT,EAAKb,GACXc,OAAQ,kBAAI,EAAKA,OAAOD,EAAKb,KAC7Be,WAAa,kBAAI,EAAKK,iBAAiBP,EAAKb,KAE5Ca,KAAOA,MAEV,4CAAkBT,KAAKhB,MAAM6B,MAAMI,OAAO,SAAAR,GAAI,OAAGA,EAAKV,WAAUoB,a,GA7CnCf,IAAMC,WCOxBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.980e5e4b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport shortid from \"shortid\"\r\n\r\nexport default class TodoForm extends React.Component{\r\n\tstate ={\r\n\t\ttext:\"\"\r\n\t};\r\n\r\n\thandleChange = event =>{\r\n\t\tthis.setState({\r\n\t\t\t[event.target.name]: event.target.value\r\n\t\t});\r\n\t};\r\n\r\n\thandleSubmit = (event)=> {\r\n\t\tevent.preventDefault();\r\n\t\tthis.props.onSubmit({\r\n\t\t\tid: shortid.generate(),\r\n\t\t\ttext: this.state.text,\r\n\t\t\tcomplete: false\r\n\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\ttext:\"\"\r\n\t\t})\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<h1>What needs to be done?</h1>\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t<input \r\n\t\t\t\tname =\"text\"\r\n\t\t\t\tvalue={this.state.text}\r\n\t\t\t\tonChange ={this.handleChange}\r\n\t\t\t\tplaceholder =\"add a new task\"\r\n\t\t\t/>\r\n\t\t\t<button onClick={this.handleSubmit}> Add todo </button>\r\n\t\t\t</form>\t\r\n\t\t\t</div>);\r\n\t};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import React from \"react\";\r\nimport \"./App.css\"\r\n\r\nexport default (props) =>(\r\n\t<div class=\"App\">\r\n\t\t<table>\r\n\t\t\t<tr class=\"Align\">\r\n\t\t\t\t<td class=\"todo1\">\r\n\t\t\t\t\t<div   \r\n\t\t\t\t\t\tstyle={{textDecoration: props.todo.complete ? \"line-through\" : ''}}\r\n\t\t\t\t\t\tonClick={props.onEdit}>{props.todo.text}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<button onClick ={props.deleteTodo}>Delete</button>\r\n\t\t\t\t</td>\r\n\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\r\n\t\t\r\n\t\t\r\n\t</div>\r\n\r\n);","import React from 'react';\nimport TodoForm from \"./components/todoform\";\nimport './components/App.css';\nimport Todo from \"./components/todo\"\n\nexport default class TodoList extends React.Component{\n  state ={\n    todos: []\n  };\n\n  addTodo = (todo)=>{\n    this.setState({\n      todos:[todo,... this.state.todos]\n    });\n  }\n\n  onEdit =(id) =>{\n    this.setState({\n      todos: this.state.todos.map(todo=> {\n        // suppose to update\n        if (todo.id ===id){\n          return {\n            ... todo,\n            complete : !todo.complete\n          }\n\n        }\n        else {\n          return todo;\n        }\n      })\n    })\n  }\n\n  handleDeleteTodo =(id) =>{\n    this.setState({todos : this.state.todos.filter(todo => todo.id !== id)});\n  }\n\n  render(){\n    return(\n      <div class=\"App\">\n        <TodoForm onSubmit ={this.addTodo} />\n         {this.state.todos.map(todo=>(\n          <Todo \n            key ={todo.id} \n            onEdit={()=>this.onEdit(todo.id)}\n            deleteTodo ={()=>this.handleDeleteTodo(todo.id)}\n\n            todo ={todo}/>\n        ))}\n         <div>todos left :{this.state.todos.filter(todo=>!todo.complete).length}</div>\n      </div>\n      );\n  };\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}